"""
Урок 12
14.12.2024
Python функции. Аргументы и модули. Библиотеки plyer и requests. Урок: 12
1. Повторение функций:
    - DRY и SRP принципы
    - Объявление функций (def)
    - Вызов функций
    - Возврат значений (return)
    - Базовые проверки типов (isinstance)
2. Типы аргументов функций:
    - Позиционные аргументы
    - Именованные аргументы
    - Аргументы по умолчанию
    - Обязательные и необязательные аргументы
3. Работа с внешними библиотеками:
    - Установка через pip
    - Импорт модулей
    - Библиотека plyer для уведомлений
    - Библиотека requests для HTTP запросов
4. Создание модулей:
    - Разделение кода на модули
    - Импорт собственных модулей
    - Относительные и абсолютные импорты
    - __name__ == '__main__'
5. Практика:
    - Создание функций для работы с API
    - Отправка уведомлений через plyer
    - Получение данных через requests
    - Структурирование кода в модули

# commit№1

DRY - Don't repeat yourself
Принцип DRY (Don't Repeat Yourself) - это принцип разработки программного обеспечения, который гласит, что каждая часть программы должна быть написана только один раз и должна быть доступна для использования в других частях программы.
SRP - Single Responsibility Principle
Принцип единственной ответственности (Single Responsibility Principle, SRP) - это принцип разработки программного обеспечения, который гласит, что каждый класс или модуль должен иметь только одну ответственность или задачу.
    """

"""

KISS (Keep It Simple, Stupid) - делай вещи проще. Функция должна быть простой и понятной.
YAGNI (You Ain't Gonna Need It) - не пиши код, который сейчас не нужен. Добавляй функциональность по мере необходимости.
"""
"""
Типы аргументов функций:
1. Позиционные аргументы:
    - Аргументы, передаваемые в функцию в том порядке, в котором они определены в объявлении функции.
    - Количество позиционных аргументов должно соответствовать количеству параметров в объявлении функции.
"""


def say_hello(name: str, age: int) -> None:
    """
    Функция приветствия.
    :param name: Имя пользователя (строка)
    :param age: Возраст пользователя (целое число)
    """
    print(f"Привет, {name.title()}! Тебе {age} лет.")


# Правильный вызов функции:
say_hello("Алексей", 30)  # Сначала строка (имя), потом число (возраст)

# Неправильный вызов был:
# say_hello(30, "Алексей")  # Так делать нельзя
# message = say_hello("Алексей", 30)

"""
Типы аргументов функций:
2. Именованные аргументы:
    - Аргументы, передаваемые в функцию с указанием их имен.
    - Можно указывать только те аргументы, которые нужны, и в произвольном порядке.
"""

say_hello(name="Алексей", age=30)

"""
Типы аргументов функций:
3. Аргументы по умолчанию:
    - Аргументы, которые имеют значения по умолчанию, если они не переданы при вызове функции.
    - Можно указывать значения по умолчанию для некоторых аргументов.
"""


def is_adult(age: int, adult_age: int = 18) -> bool:
    """
    Функция проверки возраста пользователя.
    :param age: Возраст пользователя
    :param name: Имя пользователя
    :return: True, если пользователь совершеннолетний, иначе False
    """
    return age >= adult_age


result = is_adult(20)
result2 = is_adult(17, 16)
result3 = is_adult(age=20, adult_age=16)


def is_palindrome(value) -> bool:
    """
    Функция проверки на палиндром для чисел и строк.
    :param value: Число или строка для проверки
    :return: True если палиндром, False если нет
    """
    # Проверяем, является ли значение числом
    if isinstance(value, (int, float)):
        # Преобразуем число в строку для сравнения
        value = str(value)
    # Проверяем, является ли значение строкой
    elif isinstance(value, str):
        # Приводим к нижнему регистру и убираем пробелы
        value = value.lower().replace(' ', '')
    # Если тип данных не поддерживается
    else:
        return False

    # Сравниваем строку с её перевернутой версией
    return value == value[::-1]

def main():
    """
    Основная функция для работы с пользовательским вводом
    """
    # Бесконечный цикл для постоянной работы программы
    while True:
        # Получаем ввод от пользователя
        user_input = input("Введите строку или число для проверки на палиндром (или 'выход' или 'exit' для завершения): ")

        # Проверяем, хочет ли пользователь выйти

        if user_input.lower() in ('выход', 'exit'):
            print("Программа завершена!")
            break

        try:
            # Определяем тип введенных данных
            if user_input.isdigit():
                # Если строка состоит только из цифр - преобразуем в число
                value = int(user_input)
            else:
                # Иначе оставляем как строку
                value = user_input

            # Проверяем на палиндром
            result = is_palindrome(value)
            # Выводим результат
            if result:
                print(f"'{value}' является палиндромом!")
            else:
                print(f"'{value}' не является палиндромом!")

        # Обработка возможных ошибок при преобразовании типов
        except ValueError:
            print("Произошла ошибка при обработке ввода. Попробуйте снова.")

# Проверяем, запущен ли файл напрямую
if __name__ == "__main__":
    main()

"""
Типы аргументов функций:
4. Аргументы со звездочкой (*args и **kwargs):
    - *args: Принимает произвольное количество позиционных аргументов.
    - **kwargs: Принимает произвольное количество именованных аргументов.
"""

product_list = ["Хлеб", "Молоко", "Яблоки", "Морковь", "Сыр"]
product1, product2, *other_products = product_list
print(product1, product2, other_products)

new_product_list = [product_list[0], product_list[2]]
new_product_list = [*product_list]
print(new_product_list)

new_product_list = [*product_list, "Помидоры"]
print(new_product_list)


def is_palindrome_two(*strings: str) -> list[bool]:
    result_list = []
    for string in strings:
        string = string.lower().replace(" ", "").replace(",", "").replace(".", "")
        result_list.append(string == string[::-1])
    return result_list  # Возвращаем список после проверки ВСЕХ строк


# Пример использования:
print(is_palindrome_two("Helloolleh"))  # True
print(is_palindrome_two("Hello"))  # False
